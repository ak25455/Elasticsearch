input {

 tcp {
          type => "paloalto"
          port => 5005
          codec => "plain"
      }
 udp {
          type => "ossec-syslog"
          port => 5001
          codec => "plain"
      }
}
filter {
######## PALOALTO LOGS ###################################################
    if [type] == "paloalto" and [message] =~ /TRAFFIC/ {
         csv {
             columns => [ "Domain", "ReceiveTime", "Serial", "Type", "ThreatContent Type", "Config Version", "Generate Time", "SourceIP", "DestinationIP", "NAT Source IP", "NAT Destination IP", "Rule", "Source User","Destination User","Application","Virtual System","Source Zone","Destination Zone","Inbound Interface","Outbound Interface","LogAction","Time Logged","Session ID","Repeat Count","SourcePort","DstPort","NAT Source Port","NAT Destination Port","Flags","protocol","Action","Bytes","Bytes Sent","Bytes Received","Packets","Start Time","Elapsed Time (sec)","Category","Padding","seqno","actionflags","Source Country","Destination Country","cpadding","pkts_sent","pkts_received" ]
             
			 remove_field => [ "Domain", "ReceiveTime", "Serial", "actionflags", "Config Version", "cpadding", "Flags", "Elapsed Time (sec)", "Inbound Interface", "Outbound Interface", "LogAction", "NAT Source IP", "NAT Destination IP", "SourcePort", "NAT Source Port","NAT Destination Port", "Padding", "seqno", "Session ID", "Source Port", "Time Logged", "Virtual System" ]
             add_tag => [ "PA-traffic"]
			add_field => ["HostName", "%{SourceIP}" ]
        }

        date {
            match => [ "Generate time", "YYYY/MM/dd HH:mm:ss" ]
            add_tag => [ "PA-traffic-date"]
        }
    }
    else if [type] == "paloalto" and [message] !~ /TRAFFIC/ {
        csv {
             columns => [ "Domain", "ReceiveTime", "Serial", "Type", "ThreatContent Type", "Config Version", "Generate Time", "SourceIP", "DestinationIP", "NAT Source IP", "NAT Destination IP", "Rule", "Source User","Destination User","Application","Virtual System","Source Zone","Destination Zone","Inbound Interface","Outbound Interface","LogAction","Time Logged","Session ID","Repeat Count","SourcePort","DstPort","NAT Source Port","NAT Destination Port","Flags","protocol","Action", "URL","Threat/Content Name","Category","Severity","Direction","seqno","actionflags","Source Country","Destination Country","cpadding","contenttype" ]
             remove_field => [ "Domain", "ReceiveTime", "actionflags", "Config Version", "Flags", "Inbound Interface", "Outbound Interface", "LogAction", "SourcePort", "NAT Source IP", "NAT Destination IP","NAT Source Port","NAT Destination Port", "Padding", "Direction", "seqno", "Serial", "Session ID", "Source Port", "Time Logged", "Virtual System",  "cpadding","content type" ]
             add_tag => [ "PA-nontraffic" ]
			 add_field => ["HostName", "%{SourceIP}" ]
        }

        date {
            match => [ "Generate time", "YYYY/MM/dd HH:mm:ss" ]
        }
    }
   if [type] == "paloalto" {
		dns {
			reverse   => [ "HostName" ]
			action      => "replace"
			}
		mutate {
			split => [ "HostName", "-" ]
                        rename => [ "[HostName][0]", "Dept" ]
			}
		translate {
			field => "SourceIP"
			destination => "Location"
			regex => "true"
			dictionary => [ 
									"10\.16*", "Chantilly",
									"10\.48*", "AltaVista",
									"10\.49*", "RioRancho",
									"10\.50*", "IISI",
									"10\.64*", "Production Servers",
									"10\.96*", "Terminal Servers",
									"10\.128*", "Corporate Servers"
			]
		}
	}
if [type] == "ossec-syslog" {
	grok {
         match => { "message" => "%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_host} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: Alert Level: %{BASE10NUM:Alert_Level}; Rule: %{BASE10NUM:Rule
} - %{GREEDYDATA:Description}; Location: \(%{DATA:agent}\) %{IP:AgentIP}->%{GREEDYDATA:Details}" 
							}
         add_field => [ "logstash_host", "%{host}" ]
         add_tag => [ "ossec" ]
      }
	if  [Details] =~ /WinEvtLog:/ {
		grok {
			#patterns_dir => "./"
			match => [ "Details", "%{GREEDYDATA}AUDIT_%{DATA:Action}\(%{NUMBER:EventID}\):\S+:%{GREEDYDATA:Rest}"]
			add_tag => ["Windows Event"]
			remove_field => [ "Details", "message"]
		}
	}
         if  [Details] =~ /File Integrity Changed/ {
		grok {
			match => [ "Details", "%{GREEDYDATA}for: %{QUOTEDSTRING:FileChanged}"]
			add_field => [ "Category", "File Integrity Changed"]
		}
	}
    mutate {
      remove_field => [ "syslog_hostname", "syslog_message", "syslog_pid",  "@version", "type",
 "host" ]
    }
  }
}
 
output {
#  stdout { codec => rubydebug   }

#   elasticsearch { embedded => true }
   elasticsearch { }

}


